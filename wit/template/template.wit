package fermyon:spin-template@0.0.1;

interface types {
    variant error {
        cancel,  // I know it's not truly an error but work with me here
        other(string),
    }
    resource execution-context {
        set-variable: func(name: string, value: string);
        evaluate-template: func(template: string) -> result<string, error>;
    }
}

interface template {
    use types.{error, execution-context};

    variant action {
        copy-file-substituted(string),
        copy-file-to-substituted(tuple<string, string>),
        copy-file-to-raw(tuple<string, string>),
        write-file(tuple<string, string>),
        write-file-binary(tuple<string, list<u8>>),
        // edit-file(tuple<string, func(existing: string) -> string>), // no! no! no!
        edit-file(tuple<string, edit>),
    }

    resource edit {
        apply: func(text: string) -> result<string, error>;
    }

    run: func(context: execution-context) -> result<list<action>, error>;
}

interface ui {
    use types.{error};

    prompt: func(prompt: string) -> string;
    confirm: func(prompt: string) -> bool;
    select: func(prompt: string, items: list<string>) -> u8;

    resource file {
        list-all: static func() -> list<file>;
        path: func() -> string;
        read: func() -> result<string, error>;
        read-binary: func() -> result<list<u8>, error>;
    }
}

world run-template {
    import ui;
    export template;
}
