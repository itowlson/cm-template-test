// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod fermyon {
    #[allow(dead_code)]
    pub mod spin_template {
        #[allow(dead_code, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Error {
                Cancel,
                /// I know it's not truly an error but work with me here
                Other(_rt::String),
            }
            impl ::core::fmt::Debug for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Error::Cancel => f.debug_tuple("Error::Cancel").finish(),
                        Error::Other(e) => f.debug_tuple("Error::Other").field(e).finish(),
                    }
                }
            }
            impl ::core::fmt::Display for Error {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }

            impl std::error::Error for Error {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct ExecutionContext {
                handle: _rt::Resource<ExecutionContext>,
            }

            impl ExecutionContext {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for ExecutionContext {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "fermyon:spin-template/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]execution-context"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl ExecutionContext {
                #[allow(unused_unsafe, clippy::all)]
                pub fn set_variable(&self, name: &str, value: &str) {
                    unsafe {
                        let vec0 = name;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let vec1 = value;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();

                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]execution-context.set-variable"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            ptr0.cast_mut(),
                            len0,
                            ptr1.cast_mut(),
                            len1,
                        );
                    }
                }
            }
            impl ExecutionContext {
                #[allow(unused_unsafe, clippy::all)]
                pub fn evaluate_template(&self, template: &str) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let vec0 = template;
                        let ptr0 = vec0.as_ptr().cast::<u8>();
                        let len0 = vec0.len();
                        let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/types@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]execution-context.evaluate-template"]
                            fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0.cast_mut(), len0, ptr1);
                        let l2 = i32::from(*ptr1.add(0).cast::<u8>());
                        match l2 {
                            0 => {
                                let e = {
                                    let l3 = *ptr1.add(4).cast::<*mut u8>();
                                    let l4 = *ptr1.add(8).cast::<usize>();
                                    let len5 = l4;
                                    let bytes5 = _rt::Vec::from_raw_parts(l3.cast(), len5, len5);

                                    _rt::string_lift(bytes5)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l6 = i32::from(*ptr1.add(4).cast::<u8>());
                                    let v10 = match l6 {
                                        0 => Error::Cancel,
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e10 = {
                                                let l7 = *ptr1.add(8).cast::<*mut u8>();
                                                let l8 = *ptr1.add(12).cast::<usize>();
                                                let len9 = l8;
                                                let bytes9 =
                                                    _rt::Vec::from_raw_parts(l7.cast(), len9, len9);

                                                _rt::string_lift(bytes9)
                                            };
                                            Error::Other(e10)
                                        }
                                    };

                                    v10
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod ui {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            pub type Error = super::super::super::fermyon::spin_template::types::Error;

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct File {
                handle: _rt::Resource<File>,
            }

            impl File {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for File {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                        extern "C" {
                            #[link_name = "[resource-drop]file"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            pub fn prompt(prompt: &str) -> _rt::String {
                unsafe {
                    #[repr(align(4))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                    let vec0 = prompt;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let ptr1 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                    extern "C" {
                        #[link_name = "prompt"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0, ptr1);
                    let l2 = *ptr1.add(0).cast::<*mut u8>();
                    let l3 = *ptr1.add(4).cast::<usize>();
                    let len4 = l3;
                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);
                    _rt::string_lift(bytes4)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn confirm(prompt: &str) -> bool {
                unsafe {
                    let vec0 = prompt;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                    extern "C" {
                        #[link_name = "confirm"]
                        fn wit_import(_: *mut u8, _: usize) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(ptr0.cast_mut(), len0);
                    _rt::bool_lift(ret as u8)
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            pub fn select(prompt: &str, items: &[_rt::String]) -> u8 {
                unsafe {
                    let vec0 = prompt;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec2 = items;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 8);
                        {
                            let vec1 = e;
                            let ptr1 = vec1.as_ptr().cast::<u8>();
                            let len1 = vec1.len();
                            *base.add(4).cast::<usize>() = len1;
                            *base.add(0).cast::<*mut u8>() = ptr1.cast_mut();
                        }
                    }

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                    extern "C" {
                        #[link_name = "select"]
                        fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) -> i32;
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize, _: *mut u8, _: usize) -> i32 {
                        unreachable!()
                    }
                    let ret = wit_import(ptr0.cast_mut(), len0, result2, len2);
                    if layout2.size() != 0 {
                        _rt::alloc::dealloc(result2.cast(), layout2);
                    }
                    ret as u8
                }
            }
            impl File {
                #[allow(unused_unsafe, clippy::all)]
                pub fn list_all() -> _rt::Vec<File> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                        extern "C" {
                            #[link_name = "[static]file.list-all"]
                            fn wit_import(_: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: *mut u8) {
                            unreachable!()
                        }
                        wit_import(ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let base4 = l1;
                        let len4 = l2;
                        let mut result4 = _rt::Vec::with_capacity(len4);
                        for i in 0..len4 {
                            let base = base4.add(i * 4);
                            let e4 = {
                                let l3 = *base.add(0).cast::<i32>();

                                File::from_handle(l3 as u32)
                            };
                            result4.push(e4);
                        }
                        _rt::cabi_dealloc(base4, len4 * 4, 4);
                        result4
                    }
                }
            }
            impl File {
                #[allow(unused_unsafe, clippy::all)]
                pub fn path(&self) -> _rt::String {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 8]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 8]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]file.path"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = *ptr0.add(0).cast::<*mut u8>();
                        let l2 = *ptr0.add(4).cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    }
                }
            }
            impl File {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read(&self) -> Result<_rt::String, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]file.read"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;
                                    let bytes4 = _rt::Vec::from_raw_parts(l2.cast(), len4, len4);

                                    _rt::string_lift(bytes4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::fermyon::spin_template::types::Error as V9;
                                    let v9 = match l5 {
                                        0 => V9::Cancel,
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e9 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V9::Other(e9)
                                        }
                                    };

                                    v9
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
            impl File {
                #[allow(unused_unsafe, clippy::all)]
                pub fn read_binary(&self) -> Result<_rt::Vec<u8>, Error> {
                    unsafe {
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                        let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "fermyon:spin-template/ui@0.0.1")]
                        extern "C" {
                            #[link_name = "[method]file.read-binary"]
                            fn wit_import(_: i32, _: *mut u8);
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(_: i32, _: *mut u8) {
                            unreachable!()
                        }
                        wit_import((self).handle() as i32, ptr0);
                        let l1 = i32::from(*ptr0.add(0).cast::<u8>());
                        match l1 {
                            0 => {
                                let e = {
                                    let l2 = *ptr0.add(4).cast::<*mut u8>();
                                    let l3 = *ptr0.add(8).cast::<usize>();
                                    let len4 = l3;

                                    _rt::Vec::from_raw_parts(l2.cast(), len4, len4)
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l5 = i32::from(*ptr0.add(4).cast::<u8>());
                                    use super::super::super::fermyon::spin_template::types::Error as V9;
                                    let v9 = match l5 {
                                        0 => V9::Cancel,
                                        n => {
                                            debug_assert_eq!(n, 1, "invalid enum discriminant");
                                            let e9 = {
                                                let l6 = *ptr0.add(8).cast::<*mut u8>();
                                                let l7 = *ptr0.add(12).cast::<usize>();
                                                let len8 = l7;
                                                let bytes8 =
                                                    _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                _rt::string_lift(bytes8)
                                            };
                                            V9::Other(e9)
                                        }
                                    };

                                    v9
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod fermyon {
        #[allow(dead_code)]
        pub mod spin_template {
            #[allow(dead_code, clippy::all)]
            pub mod template {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Error = super::super::super::super::fermyon::spin_template::types::Error;
                pub type ExecutionContext =
                    super::super::super::super::fermyon::spin_template::types::ExecutionContext;
                #[derive(Clone)]
                pub enum Action {
                    CopyFileSubstituted(_rt::String),
                    CopyFileToSubstituted((_rt::String, _rt::String)),
                    CopyFileToRaw((_rt::String, _rt::String)),
                    WriteFile((_rt::String, _rt::String)),
                    WriteFileBinary((_rt::String, _rt::Vec<u8>)),
                }
                impl ::core::fmt::Debug for Action {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Action::CopyFileSubstituted(e) => f
                                .debug_tuple("Action::CopyFileSubstituted")
                                .field(e)
                                .finish(),
                            Action::CopyFileToSubstituted(e) => f
                                .debug_tuple("Action::CopyFileToSubstituted")
                                .field(e)
                                .finish(),
                            Action::CopyFileToRaw(e) => {
                                f.debug_tuple("Action::CopyFileToRaw").field(e).finish()
                            }
                            Action::WriteFile(e) => {
                                f.debug_tuple("Action::WriteFile").field(e).finish()
                            }
                            Action::WriteFileBinary(e) => {
                                f.debug_tuple("Action::WriteFileBinary").field(e).finish()
                            }
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_run_cabi<T: Guest>(arg0: i32) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::run(super::super::super::super::fermyon::spin_template::types::ExecutionContext::from_handle(arg0 as u32));
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            let vec15 = e;
                            let len15 = vec15.len();
                            let layout15 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec15.len() * 20, 4);
                            let result15 = if layout15.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout15).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout15);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec15.into_iter().enumerate() {
                                let base = result15.add(i * 20);
                                {
                                    match e {
                                        Action::CopyFileSubstituted(e) => {
                                            *base.add(0).cast::<u8>() = (0i32) as u8;
                                            let vec2 = (e.into_bytes()).into_boxed_slice();
                                            let ptr2 = vec2.as_ptr().cast::<u8>();
                                            let len2 = vec2.len();
                                            ::core::mem::forget(vec2);
                                            *base.add(8).cast::<usize>() = len2;
                                            *base.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                                        }
                                        Action::CopyFileToSubstituted(e) => {
                                            *base.add(0).cast::<u8>() = (1i32) as u8;
                                            let (t3_0, t3_1) = e;
                                            let vec4 = (t3_0.into_bytes()).into_boxed_slice();
                                            let ptr4 = vec4.as_ptr().cast::<u8>();
                                            let len4 = vec4.len();
                                            ::core::mem::forget(vec4);
                                            *base.add(8).cast::<usize>() = len4;
                                            *base.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                                            let vec5 = (t3_1.into_bytes()).into_boxed_slice();
                                            let ptr5 = vec5.as_ptr().cast::<u8>();
                                            let len5 = vec5.len();
                                            ::core::mem::forget(vec5);
                                            *base.add(16).cast::<usize>() = len5;
                                            *base.add(12).cast::<*mut u8>() = ptr5.cast_mut();
                                        }
                                        Action::CopyFileToRaw(e) => {
                                            *base.add(0).cast::<u8>() = (2i32) as u8;
                                            let (t6_0, t6_1) = e;
                                            let vec7 = (t6_0.into_bytes()).into_boxed_slice();
                                            let ptr7 = vec7.as_ptr().cast::<u8>();
                                            let len7 = vec7.len();
                                            ::core::mem::forget(vec7);
                                            *base.add(8).cast::<usize>() = len7;
                                            *base.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                                            let vec8 = (t6_1.into_bytes()).into_boxed_slice();
                                            let ptr8 = vec8.as_ptr().cast::<u8>();
                                            let len8 = vec8.len();
                                            ::core::mem::forget(vec8);
                                            *base.add(16).cast::<usize>() = len8;
                                            *base.add(12).cast::<*mut u8>() = ptr8.cast_mut();
                                        }
                                        Action::WriteFile(e) => {
                                            *base.add(0).cast::<u8>() = (3i32) as u8;
                                            let (t9_0, t9_1) = e;
                                            let vec10 = (t9_0.into_bytes()).into_boxed_slice();
                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                            let len10 = vec10.len();
                                            ::core::mem::forget(vec10);
                                            *base.add(8).cast::<usize>() = len10;
                                            *base.add(4).cast::<*mut u8>() = ptr10.cast_mut();
                                            let vec11 = (t9_1.into_bytes()).into_boxed_slice();
                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                            let len11 = vec11.len();
                                            ::core::mem::forget(vec11);
                                            *base.add(16).cast::<usize>() = len11;
                                            *base.add(12).cast::<*mut u8>() = ptr11.cast_mut();
                                        }
                                        Action::WriteFileBinary(e) => {
                                            *base.add(0).cast::<u8>() = (4i32) as u8;
                                            let (t12_0, t12_1) = e;
                                            let vec13 = (t12_0.into_bytes()).into_boxed_slice();
                                            let ptr13 = vec13.as_ptr().cast::<u8>();
                                            let len13 = vec13.len();
                                            ::core::mem::forget(vec13);
                                            *base.add(8).cast::<usize>() = len13;
                                            *base.add(4).cast::<*mut u8>() = ptr13.cast_mut();
                                            let vec14 = (t12_1).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base.add(16).cast::<usize>() = len14;
                                            *base.add(12).cast::<*mut u8>() = ptr14.cast_mut();
                                        }
                                    }
                                }
                            }
                            *ptr1.add(8).cast::<usize>() = len15;
                            *ptr1.add(4).cast::<*mut u8>() = result15;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            use super::super::super::super::fermyon::spin_template::types::Error as V17;
                            match e {
                                V17::Cancel => {
                                    *ptr1.add(4).cast::<u8>() = (0i32) as u8;
                                }
                                V17::Other(e) => {
                                    *ptr1.add(4).cast::<u8>() = (1i32) as u8;
                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                    let len16 = vec16.len();
                                    ::core::mem::forget(vec16);
                                    *ptr1.add(12).cast::<usize>() = len16;
                                    *ptr1.add(8).cast::<*mut u8>() = ptr16.cast_mut();
                                }
                            }
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_run<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l21 = *arg0.add(4).cast::<*mut u8>();
                            let l22 = *arg0.add(8).cast::<usize>();
                            let base23 = l21;
                            let len23 = l22;
                            for i in 0..len23 {
                                let base = base23.add(i * 20);
                                {
                                    let l1 = i32::from(*base.add(0).cast::<u8>());
                                    match l1 {
                                        0 => {
                                            let l2 = *base.add(4).cast::<*mut u8>();
                                            let l3 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l2, l3, 1);
                                        }
                                        1 => {
                                            let l4 = *base.add(4).cast::<*mut u8>();
                                            let l5 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l4, l5, 1);
                                            let l6 = *base.add(12).cast::<*mut u8>();
                                            let l7 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                        }
                                        2 => {
                                            let l8 = *base.add(4).cast::<*mut u8>();
                                            let l9 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                            let l10 = *base.add(12).cast::<*mut u8>();
                                            let l11 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l10, l11, 1);
                                        }
                                        3 => {
                                            let l12 = *base.add(4).cast::<*mut u8>();
                                            let l13 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l12, l13, 1);
                                            let l14 = *base.add(12).cast::<*mut u8>();
                                            let l15 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l14, l15, 1);
                                        }
                                        _ => {
                                            let l16 = *base.add(4).cast::<*mut u8>();
                                            let l17 = *base.add(8).cast::<usize>();
                                            _rt::cabi_dealloc(l16, l17, 1);
                                            let l18 = *base.add(12).cast::<*mut u8>();
                                            let l19 = *base.add(16).cast::<usize>();
                                            let base20 = l18;
                                            let len20 = l19;
                                            _rt::cabi_dealloc(base20, len20 * 1, 1);
                                        }
                                    }
                                }
                            }
                            _rt::cabi_dealloc(base23, len23 * 20, 4);
                        }
                        _ => {
                            let l24 = i32::from(*arg0.add(4).cast::<u8>());
                            match l24 {
                                0 => (),
                                _ => {
                                    let l25 = *arg0.add(8).cast::<*mut u8>();
                                    let l26 = *arg0.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l25, l26, 1);
                                }
                            }
                        }
                    }
                }
                pub trait Guest {
                    fn run(context: ExecutionContext) -> Result<_rt::Vec<Action>, Error>;
                }
                #[doc(hidden)]

                macro_rules! __export_fermyon_spin_template_template_0_0_1_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "fermyon:spin-template/template@0.0.1#run"]
          unsafe extern "C" fn export_run(arg0: i32,) -> *mut u8 {
            $($path_to_types)*::_export_run_cabi::<$ty>(arg0)
          }
          #[export_name = "cabi_post_fermyon:spin-template/template@0.0.1#run"]
          unsafe extern "C" fn _post_return_run(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_run::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_fermyon_spin_template_template_0_0_1_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn bool_lift(val: u8) -> bool {
        if cfg!(debug_assertions) {
            match val {
                0 => false,
                1 => true,
                _ => panic!("invalid bool discriminant"),
            }
        } else {
            val != 0
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_run_template_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::fermyon::spin_template::template::__export_fermyon_spin_template_template_0_0_1_cabi!($ty with_types_in $($path_to_types_root)*::exports::fermyon::spin_template::template);
  )
}
#[doc(inline)]
pub(crate) use __export_run_template_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:run-template:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1019] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xf8\x06\x01A\x02\x01\
A\x08\x01B\x09\x01q\x02\x06cancel\0\0\x05other\x01s\0\x04\0\x05error\x03\0\0\x04\
\0\x11execution-context\x03\x01\x01h\x02\x01@\x03\x04self\x03\x04names\x05values\
\x01\0\x04\0&[method]execution-context.set-variable\x01\x04\x01j\x01s\x01\x01\x01\
@\x02\x04self\x03\x08templates\0\x05\x04\0+[method]execution-context.evaluate-te\
mplate\x01\x06\x03\x01!fermyon:spin-template/types@0.0.1\x05\0\x02\x03\0\0\x05er\
ror\x01B\x18\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\0\x04\0\x04file\x03\x01\x01\
i\x02\x01p\x03\x01@\0\0\x04\x04\0\x15[static]file.list-all\x01\x05\x01h\x02\x01@\
\x01\x04self\x06\0s\x04\0\x11[method]file.path\x01\x07\x01j\x01s\x01\x01\x01@\x01\
\x04self\x06\0\x08\x04\0\x11[method]file.read\x01\x09\x01p}\x01j\x01\x0a\x01\x01\
\x01@\x01\x04self\x06\0\x0b\x04\0\x18[method]file.read-binary\x01\x0c\x01@\x01\x06\
prompts\0s\x04\0\x06prompt\x01\x0d\x01@\x01\x06prompts\0\x7f\x04\0\x07confirm\x01\
\x0e\x01ps\x01@\x02\x06prompts\x05items\x0f\0}\x04\0\x06select\x01\x10\x03\x01\x1e\
fermyon:spin-template/ui@0.0.1\x05\x02\x02\x03\0\0\x11execution-context\x01B\x0e\
\x02\x03\x02\x01\x01\x04\0\x05error\x03\0\0\x02\x03\x02\x01\x03\x04\0\x11executi\
on-context\x03\0\x02\x01o\x02ss\x01p}\x01o\x02s\x05\x01q\x05\x15copy-file-substi\
tuted\x01s\0\x18copy-file-to-substituted\x01\x04\0\x10copy-file-to-raw\x01\x04\0\
\x0awrite-file\x01\x04\0\x11write-file-binary\x01\x06\0\x04\0\x06action\x03\0\x07\
\x01i\x03\x01p\x08\x01j\x01\x0a\x01\x01\x01@\x01\x07context\x09\0\x0b\x04\0\x03r\
un\x01\x0c\x04\x01$fermyon:spin-template/template@0.0.1\x05\x04\x04\x01(fermyon:\
spin-template/run-template@0.0.1\x04\0\x0b\x12\x01\0\x0crun-template\x03\0\0\0G\x09\
producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rus\
t\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
